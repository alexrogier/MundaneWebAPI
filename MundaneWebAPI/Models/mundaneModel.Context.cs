//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MundaneWebAPI.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class mundanedbEntities : DbContext
    {
        public mundanedbEntities()
            : base("name=mundanedbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Items> Items { get; set; }
    
        public virtual ObjectResult<GenerateLoot_Result> GenerateLoot(string lootType, Nullable<int> numResults, Nullable<bool> bEnableMagicalItems, Nullable<int> uncommonChance, Nullable<int> rareChance)
        {
            var lootTypeParameter = lootType != null ?
                new ObjectParameter("LootType", lootType) :
                new ObjectParameter("LootType", typeof(string));
    
            var numResultsParameter = numResults.HasValue ?
                new ObjectParameter("NumResults", numResults) :
                new ObjectParameter("NumResults", typeof(int));
    
            var bEnableMagicalItemsParameter = bEnableMagicalItems.HasValue ?
                new ObjectParameter("bEnableMagicalItems", bEnableMagicalItems) :
                new ObjectParameter("bEnableMagicalItems", typeof(bool));
    
            var uncommonChanceParameter = uncommonChance.HasValue ?
                new ObjectParameter("UncommonChance", uncommonChance) :
                new ObjectParameter("UncommonChance", typeof(int));
    
            var rareChanceParameter = rareChance.HasValue ?
                new ObjectParameter("RareChance", rareChance) :
                new ObjectParameter("RareChance", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerateLoot_Result>("GenerateLoot", lootTypeParameter, numResultsParameter, bEnableMagicalItemsParameter, uncommonChanceParameter, rareChanceParameter);
        }
    
        public virtual ObjectResult<GetAllItems_Result> GetAllItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllItems_Result>("GetAllItems");
        }
    }
}
